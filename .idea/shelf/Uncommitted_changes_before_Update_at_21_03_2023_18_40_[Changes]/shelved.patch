Index: P5/p5_mouse_click_trial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/P5/p5_mouse_click_trial.py b/P5/p5_mouse_click_trial.py
new file mode 100644
--- /dev/null	(date 1679415950625)
+++ b/P5/p5_mouse_click_trial.py	(date 1679415950625)
@@ -0,0 +1,23 @@
+from p5 import *
+
+def setup():
+    size(1280, 640)
+    no_stroke()
+    background(204)
+
+def draw():
+    if mouse_is_pressed:
+        fill(random_uniform(255), random_uniform(127), random_uniform(51), 127)
+    else:
+        fill(255, 15)
+
+    circle_size = random_uniform(low=10, high=80)
+
+    circle((mouse_x, mouse_y), circle_size)
+
+def key_pressed(event):
+    background(204)
+
+
+if __name__ == '__main__':
+    run()
\ No newline at end of file
Index: PyMunk/pymunk trial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PyMunk/pymunk trial.py b/PyMunk/pymunk trial.py
new file mode 100644
--- /dev/null	(date 1679423320834)
+++ b/PyMunk/pymunk trial.py	(date 1679423320834)
@@ -0,0 +1,91 @@
+import sys, random
+random.seed(1) # make the simulation the same each time, easier to debug
+import pygame
+import pymunk
+import pymunk.pygame_util
+
+def add_ball(space):
+    """Add a ball to the given space at a random position"""
+    mass = 3
+    radius = 25
+    inertia = pymunk.moment_for_circle(mass, 0, radius, (0,0))
+    body = pymunk.Body(mass, inertia)
+    x = random.randint(120,300)
+    body.position = x, 50
+    shape = pymunk.Circle(body, radius, (0,0))
+    shape.friction = 1
+    space.add(body, shape)
+    return shape
+
+def add_L(space):
+    """Add a inverted L shape with two joints"""
+    rotation_center_body = pymunk.Body(body_type = pymunk.Body.STATIC)
+    rotation_center_body.position = (300,300)
+
+    rotation_limit_body = pymunk.Body(body_type = pymunk.Body.STATIC)
+    rotation_limit_body.position = (200,300)
+
+    body = pymunk.Body(10, 10000)
+    body.position = (300,300)
+    l1 = pymunk.Segment(body, (-150, 0), (255.0, 0.0), 5.0)
+    l2 = pymunk.Segment(body, (-150.0, 0), (-150.0, -50.0), 5.0)
+    l1.friction = 1
+    l2.friction = 1
+    l1.mass = 8
+    l2.mass = 1
+
+    rotation_center_joint = pymunk.PinJoint(body, rotation_center_body, (0,0), (0,0))
+    joint_limit = 25
+    rotation_limit_joint = pymunk.SlideJoint(body, rotation_limit_body, (-100,0), (0,0), 0, joint_limit)
+
+    space.add(l1, l2, body, rotation_center_joint, rotation_limit_joint)
+    return l1,l2
+
+def main():
+    pygame.init()
+    screen = pygame.display.set_mode((600, 600))
+    pygame.display.set_caption("Joints. Just wait and the L will tip over")
+    clock = pygame.time.Clock()
+
+    space = pymunk.Space()
+    space.gravity = (0.0, 900.0)
+
+    lines = add_L(space)
+    balls = []
+    draw_options = pymunk.pygame_util.DrawOptions(screen)
+    # draw_options = pymunk.SpaceDebugDrawOptions()
+
+    ticks_to_next_ball = 10
+    while True:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                sys.exit(0)
+            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
+                sys.exit(0)
+
+        ticks_to_next_ball -= 1
+        if ticks_to_next_ball <= 0:
+            ticks_to_next_ball = random.randint(10, 30)
+            ball_shape = add_ball(space)
+            balls.append(ball_shape)
+
+        screen.fill((255,255,255))
+
+        balls_to_remove = []
+        for ball in balls:
+            if ball.body.position.y > 550:
+                balls_to_remove.append(ball)
+
+        for ball in balls_to_remove:
+            space.remove(ball, ball.body)
+            balls.remove(ball)
+
+        space.debug_draw(draw_options)
+
+        space.step(1/50.0)
+
+        pygame.display.flip()
+        clock.tick(50)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
Index: PyMunk/Newton's craddle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PyMunk/Newton's craddle.py b/PyMunk/Newton's craddle.py
new file mode 100644
--- /dev/null	(date 1679423938001)
+++ b/PyMunk/Newton's craddle.py	(date 1679423938001)
@@ -0,0 +1,253 @@
+"""A screensaver version of Newton's Cradle with an interactive mode.
+"""
+__docformat__ = "reStructuredText"
+
+import os
+import random
+import sys
+
+description = """
+---- Newton's Cradle ----
+A screensaver version of Newton's Cradle with an interactive mode
+/s - Run in fullscreen screensaver mode
+/p #### - Display a preview of the screensaver using a window handler
+/i - Interactive mode
+"""
+
+if len(sys.argv) < 2:
+    print(description)
+    sys.exit()
+
+is_interactive = False
+display_flags = 0
+if sys.argv[1] == "/p":  # preview mode
+    os.environ["SDL_VIDEODRIVER"] = "windib"
+    os.environ["SDL_WINDOWID"] = sys.argv[2]
+    display_size = (100, 100)
+    is_interactive = False
+
+
+### We must set OS env before the pygame imports..
+import pygame
+
+if sys.argv[1] == "/s":  # fullscreen screensaver mode
+    display_size = (0, 0)
+    is_interactive = False
+    display_flags = (
+        display_flags | pygame.FULLSCREEN
+    )  # FULLSCREEN) # | DOUBLEBUF | HWSURFACE     )
+elif sys.argv[1] == "/i":  # interactive
+    display_size = (600, 600)
+    is_interactive = True
+
+
+import pymunk as pm
+from pymunk import Vec2d
+
+
+def drawcircle(image, colour, origin, radius, width=0):
+    if width == 0:
+        pygame.draw.circle(image, colour, origin, int(radius))
+    else:
+        if radius > 65534 / 5:
+            radius = 65534 / 5
+        circle = pygame.Surface(
+            [radius * 2 + width, radius * 2 + width]
+        ).convert_alpha()
+        circle.fill([0, 0, 0, 0])
+        pygame.draw.circle(
+            circle,
+            colour,
+            [circle.get_width() / 2, circle.get_height() / 2],
+            radius + (width / 2),
+        )
+        if int(radius - (width / 2)) > 0:
+            pygame.draw.circle(
+                circle,
+                [0, 0, 0, 0],
+                [circle.get_width() / 2, circle.get_height() / 2],
+                abs(int(radius - (width / 2))),
+            )
+        image.blit(
+            circle,
+            [
+                origin[0] - (circle.get_width() / 2),
+                origin[1] - (circle.get_height() / 2),
+            ],
+        )
+
+
+def reset_bodies(space):
+    for body in space.bodies:
+        body.position = Vec2d(*body.start_position)
+        body.force = 0, 0
+        body.torque = 0
+        body.velocity = 0, 0
+        body.angular_velocity = 0
+    color = pygame.Color(
+        random.randint(1, 255), random.randint(1, 255), random.randint(1, 255)
+    )
+    for shape in space.shapes:
+        shape.color = color
+
+
+def main():
+
+    pygame.init()
+    screen = pygame.display.set_mode(display_size, display_flags)
+    width, height = screen.get_size()
+
+    def to_pygame(p):
+        """Small hack to convert pymunk to pygame coordinates"""
+        return int(p.x), int(-p.y + height)
+
+    def from_pygame(p):
+        return to_pygame(p)
+
+    clock = pygame.time.Clock()
+    running = True
+    font = pygame.font.Font(None, 16)
+
+    ### Physics stuff
+    space = pm.Space()
+    space.gravity = (0.0, -1900.0)
+    space.damping = 0.999  # to prevent it from blowing up.
+    mouse_body = pm.Body(body_type=pm.Body.KINEMATIC)
+
+    bodies = []
+    for x in range(-100, 150, 50):
+        x += width / 2
+        offset_y = height / 2
+        mass = 10
+        radius = 25
+        moment = pm.moment_for_circle(mass, 0, radius, (0, 0))
+        body = pm.Body(mass, moment)
+        body.position = (x, -125 + offset_y)
+        body.start_position = Vec2d(*body.position)
+        shape = pm.Circle(body, radius)
+        shape.elasticity = 0.9999999
+        space.add(body, shape)
+        bodies.append(body)
+        pj = pm.PinJoint(space.static_body, body, (x, 125 + offset_y), (0, 0))
+        space.add(pj)
+
+    reset_bodies(space)
+    selected = None
+
+    if not is_interactive:
+        pygame.time.set_timer(pygame.USEREVENT + 1, 70000)  # apply force
+        pygame.time.set_timer(pygame.USEREVENT + 2, 120000)  # reset
+        pygame.event.post(pygame.event.Event(pygame.USEREVENT + 1))
+        pygame.mouse.set_visible(False)
+
+    while running:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                running = False
+            elif event.type == pygame.KEYDOWN and event.key == pygame.K_p:
+                pygame.image.save(screen, "newtons_cradle.png")
+
+            if event.type == pygame.USEREVENT + 1:
+                r = random.randint(1, 4)
+                for body in bodies[0:r]:
+                    body.apply_impulse_at_local_point((-6000, 0))
+            if event.type == pygame.USEREVENT + 2:
+                reset_bodies(space)
+
+            elif (
+                event.type == pygame.KEYDOWN
+                and event.key == pygame.K_r
+                and is_interactive
+            ):
+                reset_bodies(space)
+            elif (
+                event.type == pygame.KEYDOWN
+                and event.key == pygame.K_f
+                and is_interactive
+            ):
+                r = random.randint(1, 4)
+                for body in bodies[0:r]:
+                    body.apply_impulse_at_local_point((-6000, 0))
+
+            elif event.type == pygame.MOUSEBUTTONDOWN and is_interactive:
+                if selected != None:
+                    space.remove(selected)
+                p = from_pygame(Vec2d(*event.pos))
+                hit = space.point_query_nearest(p, 0, pm.ShapeFilter())
+                if hit != None:
+                    shape = hit.shape
+                    rest_length = mouse_body.position.get_distance(shape.body.position)
+                    ds = pm.DampedSpring(
+                        mouse_body, shape.body, (0, 0), (0, 0), rest_length, 1000, 10
+                    )
+                    space.add(ds)
+                    selected = ds
+
+            elif event.type == pygame.MOUSEBUTTONUP and is_interactive:
+                if selected != None:
+                    space.remove(selected)
+                    selected = None
+
+            elif event.type == pygame.KEYDOWN:
+                running = False
+            elif event.type == pygame.MOUSEBUTTONDOWN:
+                running = False
+
+        mpos = pygame.mouse.get_pos()
+        p = from_pygame(Vec2d(*mpos))
+        mouse_body.position = p
+
+        ### Clear screen
+        screen.fill(pygame.Color("black"))
+
+        ### Draw stuff
+        for c in space.constraints:
+            pv1 = c.a.position + c.anchor_a
+            pv2 = c.b.position + c.anchor_b
+            p1 = to_pygame(pv1)
+            p2 = to_pygame(pv2)
+            pygame.draw.aalines(screen, pygame.Color("lightgray"), False, [p1, p2])
+
+        for ball in space.shapes:
+            p = to_pygame(ball.body.position)
+            drawcircle(screen, ball.color, p, int(ball.radius), 0)
+            # pygame.draw.circle(screen, ball.color, p, int(ball.radius), 0)
+
+        ### Update physics
+        fps = 50
+        iterations = 25
+        dt = 1.0 / float(fps) / float(iterations)
+        for x in range(iterations):  # 10 iterations to get a more stable simulation
+            space.step(dt)
+
+        ### Flip screen
+        if is_interactive:
+            screen.blit(
+                font.render(
+                    "fps: " + str(clock.get_fps()), True, pygame.Color("white")
+                ),
+                (0, 0),
+            )
+            screen.blit(
+                font.render(
+                    "Press left mouse button and drag to interact",
+                    True,
+                    pygame.Color("darkgrey"),
+                ),
+                (5, height - 35),
+            )
+            screen.blit(
+                font.render(
+                    "Press R to reset, any other key to quit",
+                    True,
+                    pygame.Color("darkgrey"),
+                ),
+                (5, height - 20),
+            )
+
+        pygame.display.flip()
+        clock.tick(fps)
+
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
Index: PyMunk/arrows.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PyMunk/arrows.py b/PyMunk/arrows.py
new file mode 100644
--- /dev/null	(date 1679421462352)
+++ b/PyMunk/arrows.py	(date 1679421462352)
@@ -0,0 +1,225 @@
+"""Showcase of flying arrows that can stick to objects in a somewhat
+realistic looking way.
+"""
+import sys
+from typing import List
+
+import pygame
+
+import pymunk
+import pymunk.pygame_util
+from pymunk.vec2d import Vec2d
+
+
+def create_arrow():
+    vs = [(-30, 0), (0, 3), (10, 0), (0, -3)]
+    # mass = 1
+    # moment = pymunk.moment_for_poly(mass, vs)
+    arrow_body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)
+
+    arrow_shape = pymunk.Poly(arrow_body, vs)
+    arrow_shape.friction = 0.5
+    arrow_shape.collision_type = 1
+    arrow_shape.density = 0.1
+    return arrow_body, arrow_shape
+
+
+def stick_arrow_to_target(space, arrow_body, target_body, position, flying_arrows):
+    pivot_joint = pymunk.PivotJoint(arrow_body, target_body, position)
+    phase = target_body.angle - arrow_body.angle
+    gear_joint = pymunk.GearJoint(arrow_body, target_body, phase, 1)
+    space.add(pivot_joint)
+    space.add(gear_joint)
+    try:
+        flying_arrows.remove(arrow_body)
+    except:
+        pass
+
+
+def post_solve_arrow_hit(arbiter, space, data):
+    if arbiter.total_impulse.length > 300:
+        a, b = arbiter.shapes
+        position = arbiter.contact_point_set.points[0].point_a
+        b.collision_type = 0
+        b.group = 1
+        other_body = a.body
+        arrow_body = b.body
+        space.add_post_step_callback(
+            stick_arrow_to_target,
+            arrow_body,
+            other_body,
+            position,
+            data["flying_arrows"],
+        )
+
+
+width, height = 690, 600
+
+
+def main():
+    ### PyGame init
+    pygame.init()
+    screen = pygame.display.set_mode((width, height))
+    clock = pygame.time.Clock()
+    running = True
+    font = pygame.font.SysFont("Arial", 16)
+
+    ### Physics stuff
+    space = pymunk.Space()
+    space.gravity = 0, 1000
+    draw_options = pymunk.pygame_util.DrawOptions(screen)
+
+    # walls - the left-top-right walls
+    static: List[pymunk.Shape] = [
+        pymunk.Segment(space.static_body, (50, 550), (50, 50), 5),
+        pymunk.Segment(space.static_body, (50, 50), (650, 50), 5),
+        pymunk.Segment(space.static_body, (650, 50), (650, 550), 5),
+        pymunk.Segment(space.static_body, (50, 550), (650, 550), 5),
+    ]
+
+    b2 = pymunk.Body(body_type=pymunk.Body.KINEMATIC)
+    static.append(pymunk.Circle(b2, 30))
+    b2.position = 300, 200
+
+    for s in static:
+        s.friction = 1.0
+        s.group = 1
+    space.add(b2, *static)
+
+    # "Cannon" that can fire arrows
+    cannon_body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)
+    cannon_shape = pymunk.Circle(cannon_body, 25)
+    cannon_shape.sensor = True
+    cannon_shape.color = (255, 50, 50, 255)
+    cannon_body.position = 100, 500
+    space.add(cannon_body, cannon_shape)
+
+    arrow_body, arrow_shape = create_arrow()
+    space.add(arrow_body, arrow_shape)
+
+    flying_arrows: List[pymunk.Body] = []
+    handler = space.add_collision_handler(0, 1)
+    handler.data["flying_arrows"] = flying_arrows
+    handler.post_solve = post_solve_arrow_hit
+
+    start_time = 0
+    while running:
+        for event in pygame.event.get():
+            if (
+                event.type == pygame.QUIT
+                or event.type == pygame.KEYDOWN
+                and (event.key in [pygame.K_ESCAPE, pygame.K_q])
+            ):
+                running = False
+            elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
+                start_time = pygame.time.get_ticks()
+            elif event.type == pygame.KEYDOWN and event.key == pygame.K_p:
+                pygame.image.save(screen, "arrows.png")
+            elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
+                end_time = pygame.time.get_ticks()
+
+                diff = end_time - start_time
+                power = max(min(diff, 1000), 10) * 13.5
+                impulse = power * Vec2d(1, 0)
+                impulse = impulse.rotated(arrow_body.angle)
+                arrow_body.body_type = pymunk.Body.DYNAMIC
+                arrow_body.apply_impulse_at_world_point(impulse, arrow_body.position)
+
+                # space.add(arrow_body)
+                flying_arrows.append(arrow_body)
+
+                arrow_body, arrow_shape = create_arrow()
+                space.add(arrow_body, arrow_shape)
+
+        keys = pygame.key.get_pressed()
+
+        speed = 2.5
+        if keys[pygame.K_UP]:
+            cannon_body.position += Vec2d(0, 1) * speed
+        if keys[pygame.K_DOWN]:
+            cannon_body.position += Vec2d(0, -1) * speed
+        if keys[pygame.K_LEFT]:
+            cannon_body.position += Vec2d(-1, 0) * speed
+        if keys[pygame.K_RIGHT]:
+            cannon_body.position += Vec2d(1, 0) * speed
+
+        mouse_position = pymunk.pygame_util.from_pygame(
+            Vec2d(*pygame.mouse.get_pos()), screen
+        )
+        cannon_body.angle = (mouse_position - cannon_body.position).angle
+        # move the unfired arrow together with the cannon
+        arrow_body.position = cannon_body.position + Vec2d(
+            cannon_shape.radius + 40, 0
+        ).rotated(cannon_body.angle)
+        arrow_body.angle = cannon_body.angle
+        # print(arrow_body.angle)
+
+        for flying_arrow in flying_arrows:
+            drag_constant = 0.0002
+
+            pointing_direction = Vec2d(1, 0).rotated(flying_arrow.angle)
+            # print(pointing_direction.angle, flying_arrow.angle)
+            flight_direction = Vec2d(*flying_arrow.velocity)
+            flight_direction, flight_speed = flight_direction.normalized_and_length()
+
+            dot = flight_direction.dot(pointing_direction)
+            # (1-abs(dot)) can be replaced with (1-dot) to make arrows turn
+            # around even when fired straight up. Might not be as accurate, but
+            # maybe look better.
+            drag_force_magnitude = (
+                (1 - abs(dot)) * flight_speed ** 2 * drag_constant * flying_arrow.mass
+            )
+            arrow_tail_position = flying_arrow.position + Vec2d(-50, 0).rotated(
+                flying_arrow.angle
+            )
+            flying_arrow.apply_impulse_at_world_point(
+                drag_force_magnitude * -flight_direction, arrow_tail_position
+            )
+
+            flying_arrow.angular_velocity *= 0.5
+
+        ### Clear screen
+        screen.fill(pygame.Color("black"))
+
+        ### Draw stuff
+        space.debug_draw(draw_options)
+        # draw(screen, space)
+
+        # Power meter
+        if pygame.mouse.get_pressed()[0]:
+            current_time = pygame.time.get_ticks()
+            diff = current_time - start_time
+            power = max(min(diff, 1000), 10)
+            h = power // 2
+            pygame.draw.line(screen, pygame.Color("red"), (30, 550), (30, 550 - h), 10)
+
+        # Info and flip screen
+        screen.blit(
+            font.render("fps: " + str(clock.get_fps()), True, pygame.Color("white")),
+            (0, 0),
+        )
+        screen.blit(
+            font.render(
+                "Aim with mouse, hold LMB to powerup, release to fire",
+                True,
+                pygame.Color("darkgrey"),
+            ),
+            (5, height - 35),
+        )
+        screen.blit(
+            font.render("Press ESC or Q to quit", True, pygame.Color("darkgrey")),
+            (5, height - 20),
+        )
+
+        pygame.display.flip()
+
+        ### Update physics
+        fps = 60
+        dt = 1.0 / fps
+        space.step(dt)
+
+        clock.tick(fps)
+
+
+if __name__ == "__main__":
+    sys.exit(main())
Index: P5/p5 trial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/P5/p5 trial.py b/P5/p5 trial.py
new file mode 100644
--- /dev/null	(date 1679417278223)
+++ b/P5/p5 trial.py	(date 1679417278223)
@@ -0,0 +1,15 @@
+import p5
+
+
+def setup():
+    p5.size(1000, 1000)
+    p5.background(0)
+
+
+def draw():
+    p5.fill(255)
+    p5.circle((mouse_x, mouse_y), 20)
+
+
+if __name__ == '__main__':
+    p5.run()
\ No newline at end of file
